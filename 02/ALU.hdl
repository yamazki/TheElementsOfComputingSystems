// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
    
    PARTS:
    // if (zx == 1) set x = 0        // 16-bit constant
    // if (nx == 1) set x = !x       // bitwise not
    Mux16(a=x, b=false, sel=zx, out=outzx);
    Not16(in=outzx, out=notoutzx);
    Mux16(a=outzx, b=notoutzx, sel=nx, out=outnx);
    
    // if (zy == 1) set y = 0        // 16-bit constant
    // if (ny == 1) set y = !y       // bitwise not 
    Mux16(a=y, b=false, sel=zy, out=outzy);
    Not16(in=outzy, out=notoutzy);
    Mux16(a=outzy, b=notoutzy, sel=ny, out=outny);

    // if (f == 0)  set out = x & y  // bitwise and
    // if (f == 1)  set out = x + y  // integer 2's complement addition
    And16(a=outnx, b=outny, out=outAnd);
    Add16(a=outnx, b=outny, out=outAdd);
    Mux16(a=outAnd, b=outAdd, sel=f, out=outf);

    // if (no == 1) set out = !out   // bitwise not
    Not16(in=outf, out=notoutf);
    Mux16(a=outf, b=notoutf, sel=no, out=test);
    Mux16(a=outf, b=notoutf, sel=no, out[0..7]=outno1, out[8..15]=outno2, out[15]=outno3);


    // if (out == 0) set zr = 1
    Or8Way(in=outno1, out=outzr1);
    Or8Way(in=outno2, out=outzr2);
    Or(a=outzr1, b=outzr2, out=zr3);
    Not(in=zr3, out=zr);

    // if (out < 0) set ng = 1
    And(a=outno3, b=true, out=ng);

    // 分解したoutの結合
    And16(a[0..7]=outno1,a[8..15]=outno2, b=true, out=out);
    
    


   // // if (zx == 1) set x = 0        // 16-bit constant
   // // zx = 0 xを出力
   // // zx = 1 xを0に
   // Not(in=zx, out=notzx);
   // And16(a=x,
   // b[0]=notzx, b[1]=notzx,b[2]=notzx,
   // b[3]=notzx,b[4]=notzx,b[5]=notzx,b[6]=notzx,b[7]=notzx,
   // b[8]=notzx,b[9]=notzx,b[10]=notzx,b[11]=notzx,b[12]=notzx,
   // b[13]=notzx,b[14]=notzx,b[15]=notzx,
   // out=zxout);    
   // 
   // // if (nx == 1) set x = !x       // bitwise not
   // // nx = 0 xを出力
   // // nx = 1 xを反転
   // Not16(in=zxout, out=notx);
   // Not(in=nx, out=notnx);
   // And16(a=zxout,
   // b[0]=notnx,b[1]=notnx,b[2]=notnx,b[3]=notnx,
   // b[4]=notnx,b[5]=notnx,b[6]=notnx,b[7]=notnx,
   // b[8]=notnx,b[9]=notnx,b[10]=notnx,b[11]=notnx,
   // b[12]=notnx,b[13]=notnx,b[14]=notnx,b[15]=notnx,
   // out=nx1);    
   // And16(a=notx,
   // b[0]=nx,b[1]=nx,b[2]=nx,b[3]=nx,
   // b[4]=nx,b[5]=nx,b[6]=nx,b[7]=nx,
   // b[8]=nx,b[9]=nx,b[10]=nx,b[11]=nx,
   // b[12]=nx,b[13]=nx,b[14]=nx,b[15]=nx,
   // out=nx2);    
   // Or16(a=nx1, b=nx2, out=nxout);
//
   // // if (zy == 1) set y = 0        // 16-bit constant
   // Not(in=zy, out=notzy);
   // And16(a=y, b[0]=notzy,b[1]=notzy, out=zyout);    
//
   // // if (ny == 1) set y = !y       // bitwise not
   // Not16(in=zyout, out=noty);
   // Not(in=ny, out=notny);
   // And16(a=zyout,
   // b[0]=notny, b[1]=notny,b[2]=notny,
   // b[3]=notny,b[4]=notny,b[5]=notny,b[6]=notny,b[7]=notny,
   // b[8]=notny,b[9]=notny,b[10]=notny,b[11]=notny,b[12]=notny,
   // b[13]=notny,b[14]=notny,b[15]=notny,
   // out=ny1);    
   // And16(a=noty,
   // b[0]=ny, b[1]=ny,b[2]=ny,
   // b[3]=ny,b[4]=ny,b[5]=ny,b[6]=ny,b[7]=ny,
   // b[8]=ny,b[9]=ny,b[10]=ny,b[11]=ny,b[12]=ny,
   // b[13]=ny,b[14]=ny,b[15]=ny,
   // out=ny2);    
//
   // Or16(a=ny1, b=ny2, out=nyout);
//
   // // if (f == 0)  set out = x & y  // bitwise and
   // // if (f == 1)  set out = x + y  // integer 2's complement addition
   // // 計算自体は両方行うが、自身が計算を行う以外のfに対しては計算結果が0になるようにする
//
   // // f=0のときはこっちの値をoutとして使用
   // And16(a=nxout, b=nyout, out=tmpAndOut);
   // Not(in=f, out=notf);
   // And16(a=tmpAndOut,
   // b[0]=notf, b[1]=notf,b[2]=notf,
   // b[3]=notf,b[4]=notf,b[5]=notf,b[6]=notf,b[7]=notf,
   // b[8]=notf,b[9]=notf,b[10]=notf,b[11]=notf,b[12]=notf,
   // b[13]=notf,b[14]=notf,b[15]=notf,
   // out=f0out);    
//
//
   // // f=1のときはこっちの値をoutとして使用
   // Add16(a=nxout, b=nyout, out=tmpAddOut);
   // And16(a=tmpAddOut,
   // b[0]=f,b[1]=f,b[2]=f,b[3]=f,
   // b[4]=f,b[5]=f,b[6]=f,b[7]=f,
   // b[8]=f,b[9]=f,b[10]=f,b[11]=f,
   // b[12]=f,b[13]=f,b[14]=f,b[15]=f,
   // out=f1out);    
//
   // Or16(a=f0out, b=f1out, out=tmpOut);
//
   // // if (no == 1) set out = !out   // bitwise not
   // Not16(in=tmpOut, out=notTmpOut);
   // Not(in=no, out=notno);
   // And16(a=notTmpOut,
   // b[0]=no,b[1]=no,b[2]=no,b[3]=no,
   // b[4]=no,b[5]=no,b[6]=no,b[7]=no,
   // b[8]=no,b[9]=no,b[10]=no,b[11]=no,
   // b[12]=no,b[13]=no,b[14]=no,b[15]=no,
   // out=tmpOut1);    
//
   // And16(a=tmpOut,
   // b[0]=notno,b[1]=notno,b[2]=notno,b[3]=notno,
   // b[4]=notno,b[5]=notno,b[6]=notno,b[7]=notno,
   // b[8]=notno,b[9]=notno,b[10]=notno,b[11]=notno,
   // b[12]=notno,b[13]=notno,b[14]=notno,b[15]=notno,
   // out=tmpOut2);    
//
//
   // Or16(a=tmpOut1, b=tmpOut2, out=out);
//
   // 
//
   // // if (out == 0) set zr = 1
   // // outの全ビットが0ならばzr=1
   // // 全ビットをOr演算を行い、結果が0 = 全ビットが0なので、結果を反転してzr=1とする。
   // Or16(a=tmpOut1, b=tmpOut2, out=outForZrTmp);
   // And16(a=outForZrTmp, b[0..15]=true, out=outForZr);
   // Or(a=outForZr[0], b=true, out=out1);    
   // Or(a=outForZr[2], b=out1, out=out2);
   // Or(a=outForZr[3], b=out2, out=out3);
   // Or(a=outForZr[4], b=out3, out=out4);
   // Or(a=outForZr[5], b=out4, out=out5);
   // Or(a=outForZr[6], b=out5, out=out6);
   // Or(a=outForZr[7], b=out6, out=out7);
   // Or(a=outForZr[8], b=out7, out=out8);
   // Or(a=outForZr[9], b=out8, out=out9);
   // Or(a=outForZr[10], b=out9, out=out10);
   // Or(a=outForZr[11], b=out10, out=out11);
   // Or(a=outForZr[12], b=out11, out=out12);
   // Or(a=outForZr[13], b=out12, out=out13);
   // Or(a=outForZr[14], b=out13, out=out14);
   // Or(a=outForZr[15], b=out14, out=out15);
   // Not(in=out15, out=zr);
   // 
   // // if (out < 0) set ng = 1
   // // 最上位ビットが1ならばng=1
   // And(a=out[15], b=true, out=ng);

   // Put you code here:
}